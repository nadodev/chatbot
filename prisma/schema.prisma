// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ChatConfig {
  id                String   @id @default(cuid())
  chatId            String   @unique
  chat              Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  aiProvider        String   @default("google") // "google" ou "openai"
  model             String   @default("gemini-2.0-flash") // modelo especÃ­fico a ser usado
  temperature       Float    @default(0.7)
  maxTokens         Int      @default(150)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([chatId])
}

model Products {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Float
  in_stock    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Chat {
  id          String       @id @default(cuid())
  name        String
  status      String       @default("active")
  avatar      String       @default("ðŸ¤–")
  greeting    String       @db.Text
  appearance  Json?        @default("{}")
  behavior    Json?        @default("{}")
  dbConfig    Json?        @default("{}")
  theme       Json?        @default("{\"primaryColor\":\"#6366f1\",\"secondaryColor\":\"#4f46e5\",\"effect\":\"fade\"}")
  dataSource  String?      @default("database")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  sources     ChatSource[]
  messages    Message[]
  config      ChatConfig?
}

model ChatSource {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  type      String   // "file" or "url"
  name      String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([chatId])
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  role      String   // "user" or "assistant"
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([chatId])
}

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String   @db.Text
  answer    String   @db.Text
  category  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}